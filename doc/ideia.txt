a system using Python and the Tkinter library that allows managing JSON files through a user-friendly graphical interface. The system should accept two JSON files as input:

A model definition file, containing only a __meta__ object, which describes the expected structure of the JSON, including field names, data types, and whether each field is required or optional.

A main editable JSON file, containing multiple entries that should conform to the structure defined in the __meta__ section.


"The structure of the __meta__ object below is an example format to illustrate how metadata can be defined; For a specific json example

{
  "__meta__": {
    "name": { "type": "str", "required": true },
    "email": { "type": "str", "required": false },
    "age": { "type": "int", "required": false },
    "active": { "type": "bool", "required": true },
    "tags": { "type": "list", "required": false }
  }
}

Based on this model, the system should:

Parse and interpret the structure from the __meta__ object only (no example instance is necessary).

Load and validate the main JSON file, ensuring each entry matches the model: required fields must exist, and all fields must have the correct type.

Generate a dynamic visual CRUD interface, allowing:

Editing values with proper widgets per data type (e.g., text boxes, checkboxes, number fields).

Adding new elements that follow the model definition.

Deleting existing elements from the dataset.

Prevent any structural changes not allowed by the model (no extra fields or type mismatches).

Save changes to the same file or export to a new .json.

Additional features:

Tree-style view for visualizing hierarchical or nested structures.

Search functionality for keys or values.

Undo/redo history.

Light/dark mode toggle.

Drag-and-drop support for both model and editable files.

Optional support for large files (optimized parsing).

The system will act as a visual JSON spreadsheet editor, driven by a clearly defined schema (__meta__), focusing on safe, structured editing with strong validation and an intuitive GUI.